# by default some intel compilers put temporaries on the stack
# this might lead to segmentation faults is the stack limit is set to low
# stack limits can be increased by sysadmins or e.g with ulimit -s 256000
# furthermore new ifort (10.0?) compilers support the option
# -heap-arrays 64
# add this to the compilation flags is the other options do not work
# The following settings worked for:
# - AMD64 Opteron
# - SUSE Linux Enterprise Server 10.0 (x86_64)
# - Intel(R) Fortran Compiler for Intel(R) EM64T-based applications, Version 10.0.025
# - AMD acml library version 3.6.0
# - MPICH2-1.0.5p4
# - SCALAPACK library          1.8.0
#
#
CC       = icc
CPP      = 
FC       = mpif90 
LD       = mpif90
AR       = ar -r
INTEL_INC = /home/mauro/sw/intel/composer_xe_2013.3.163/include
DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK -D__FFTW3
CPPFLAGS = 
FCFLAGS  = $(DFLAGS) -I$(INTEL_INC) -O3 -heap-arrays 64 -funroll-loops -fpp -free
FCFLAGS2 = $(DFLAGS) -I$(INTEL_INC) -O1 -heap-arrays 64 -fpp -free
LDFLAGS  = $(FCFLAGS) -I$(INTEL_INC) \
           -L/home/mauro/sw/intel/composer_xe_2013.3.163/mkl/lib/intel64 \
           -L/home/mauro/sw/openmpi/lib

LIBS     = -lstdc++ -lfftw3 -lmkl_gf_lp64 -lmkl_scalapack_lp64 -lmkl_blacs_openmpi_lp64 -lmkl_sequential -lmkl_core

OBJECTS_ARCHITECTURE = machine_intel.o


graphcon.o: graphcon.F
	$(FC) -c $(FCFLAGS2) $<

