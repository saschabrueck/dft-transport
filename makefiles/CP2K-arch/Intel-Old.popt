# by default some intel compilers put temporaries on the stack
# this might lead to segmentation faults is the stack limit is set to low
# stack limits can be increased by sysadmins or e.g with ulimit -s 256000
# furthermore new ifort (10.0?) compilers support the option
# -heap-arrays 64
#
# THIS IS SASCHAS VERSION AND HE LIKES IT BECAUSE ONE ONLY NEEDS TO EXPORT THE PATH TO THE INTEL MPIF90 IN /usr/local/mpich2/intel/bin
#

MKLLIB       = /usr/pack/intel_compiler-11.1.075-af/Linux-x86_64/mkl/lib/em64t
MKLINC       = /usr/pack/intel_compiler-11.1.075-af/Linux-x86_64/mkl/include/em64t
FFTINC       = /usr/pack/intel_compiler-11.1.075-af/Linux-x86_64/mkl/include/fftw
INTLIB       = /usr/pack/intel_compiler-11.1.075-af/Linux-x86_64/lib
INTINC       = /usr/pack/intel_compiler-11.1.075-af/Linux-x86_64/include

CC       = cc
CPP      = 
FC       = mpif90 
LD       = mpif90
AR       = ar -r
DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK -D__FFTW3
CPPFLAGS = 
FCFLAGS  = $(DFLAGS) -I$(INTINC) -I$(INTINC)/intel64 -I$(MKLINC) -I$(FFTINC) -O3 -xW -heap-arrays 64 -funroll-loops -fpp -free
FCFLAGS2 = $(DFLAGS) -I$(INTINC) -I$(INTINC)/intel64 -I$(MKLINC) -I$(FFTINC) -O1 -xW -heap-arrays 64 -fpp -free
LDFLAGS  = $(FCFLAGS) 
LIBS     = -L$(INTLIB) $(MKLLIB)/libmkl_scalapack_lp64.a -Wl,--start-group  $(MKLLIB)/libmkl_intel_lp64.a $(MKLLIB)/libmkl_intel_thread.a $(MKLLIB)/libmkl_core.a $(MKLLIB)/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group -liomp5 -lm

OBJECTS_ARCHITECTURE = machine_intel.o


graphcon.o: graphcon.F
	$(FC) -c $(FCFLAGS2) $<

