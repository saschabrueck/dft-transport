#ifndef CP2K_OMENDFT_TRANSPORT_QUADRATURE_GL_H_
#define CP2K_OMENDFT_TRANSPORT_QUADRATURE_GL_H_


/// This namespace contains the precalculated abscissae and weights for
/// Gauss-Legendre quadrature
namespace GaussLegendre {

// The values in the included files have been generated by Mathematica 
// (see precomp/quadrature_GL.nb)

std::vector<double> get_abscissae(unsigned int);
std::vector<double> get_abscissae(unsigned int i) {

#ifdef HAS_NO_2D_VEC_INIT
#define GL_PREC_SIZE 140            // must be the same as in GaussLegendre.nb!
  const double tmp_array[GL_PREC_SIZE][GL_PREC_SIZE] = {
#   include "precomp/Quadrature_GL_abscissae.precomp"
  };
  std::vector<std::vector<double> > abscissae;
  for (int j=0; j<GL_PREC_SIZE; ++j) {
    std::vector<double> tmp 
        (tmp_array[j], tmp_array[j] + sizeof(tmp_array[j]) / sizeof(double));
    abscissae.push_back(tmp);
  }
#else
  const std::vector<std::vector<double>> abscissae {
#   include "precomp/Quadrature_GL_abscissae.precomp"
  };
#endif
  if (i > abscissae.size()-1) {
    throw excQuadrature("More abscissae requested than have been precalculated");
  }

  return abscissae[i];
}

std::vector<double> get_weights(unsigned int);
std::vector<double> get_weights(unsigned int i) {

#ifdef HAS_NO_2D_VEC_INIT
  const double tmp_array[GL_PREC_SIZE][GL_PREC_SIZE] = {
#   include "precomp/Quadrature_GL_weights.precomp"
  };
  std::vector<std::vector<double> > weights;
  for (int j=0; j<GL_PREC_SIZE; ++j) {
    std::vector<double> tmp 
        (tmp_array[j], tmp_array[j] + sizeof(tmp_array[j]) / sizeof(double));
    weights.push_back(tmp);
  }
#else
  const std::vector<std::vector<double>> weights {
#   include "precomp/Quadrature_GL_weights.precomp"
  };
#endif
  if (i > weights.size()-1) {
    throw excQuadrature("More weights requested than have been precalculated");
  }
  return weights[i];
}

} // namespace

#endif
