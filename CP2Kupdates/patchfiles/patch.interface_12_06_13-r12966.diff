Index: dbcsr_lib/dbcsr_transformations.F
===================================================================
--- dbcsr_lib/dbcsr_transformations.F	(revision 12966)
+++ dbcsr_lib/dbcsr_transformations.F	(working copy)
@@ -17,6 +17,8 @@
   USE array_types,                     ONLY: array_data,&
                                              array_hold,&
                                              array_i1d_obj,&
+                                             array_new,&
+                                             array_nullify,&
                                              array_release
   USE dbcsr_block_access,              ONLY: dbcsr_access_flush,&
                                              dbcsr_access_start,&
@@ -56,7 +58,8 @@
                                              dbcsr_iterator_next_block,&
                                              dbcsr_iterator_start,&
                                              dbcsr_iterator_stop
-  USE dbcsr_kinds,                     ONLY: dp,&
+  USE dbcsr_kinds,                     ONLY: default_string_length,&
+                                             dp,&
                                              int_8,&
                                              sp
   USE dbcsr_message_passing,           ONLY: mp_allgather,&
@@ -64,22 +67,23 @@
   USE dbcsr_methods,                   ONLY: &
        dbcsr_col_block_sizes, dbcsr_distribution, &
        dbcsr_distribution_col_dist, dbcsr_distribution_has_threads, &
-       dbcsr_distribution_hold, dbcsr_distribution_local_cols, &
-       dbcsr_distribution_local_rows, dbcsr_distribution_make_threads, &
-       dbcsr_distribution_mp, dbcsr_distribution_ncols, &
+       dbcsr_distribution_hold, dbcsr_distribution_init, &
+       dbcsr_distribution_local_cols, dbcsr_distribution_local_rows, &
+       dbcsr_distribution_make_threads, dbcsr_distribution_mp, &
+       dbcsr_distribution_ncols, dbcsr_distribution_new, &
        dbcsr_distribution_nlocal_cols, dbcsr_distribution_nlocal_rows, &
        dbcsr_distribution_no_threads, dbcsr_distribution_nrows, &
        dbcsr_distribution_release, dbcsr_distribution_row_dist, &
-       dbcsr_get_data_size_referenced, dbcsr_get_data_type, &
+       dbcsr_get_data_size_referenced, dbcsr_get_data_type, dbcsr_get_info, &
        dbcsr_get_matrix_type, dbcsr_has_symmetry, dbcsr_image_dist_hold, &
        dbcsr_image_dist_release, dbcsr_init, dbcsr_is_initialized, &
        dbcsr_mp_grid_remove, dbcsr_mp_grid_setup, dbcsr_mp_group, &
        dbcsr_mp_has_subgroups, dbcsr_mp_my_col_group, dbcsr_mp_my_row_group, &
-       dbcsr_mp_mynode, dbcsr_mp_mypcol, dbcsr_mp_myprow, dbcsr_mp_npcols, &
-       dbcsr_mp_nprows, dbcsr_mp_numnodes, dbcsr_mp_pgrid, &
-       dbcsr_nblkcols_total, dbcsr_nblkrows_total, dbcsr_nfullcols_total, &
-       dbcsr_nfullrows_total, dbcsr_release, dbcsr_row_block_sizes, &
-       dbcsr_switch_data_area, dbcsr_valid_index
+       dbcsr_mp_mynode, dbcsr_mp_mypcol, dbcsr_mp_myprow, dbcsr_mp_new, &
+       dbcsr_mp_npcols, dbcsr_mp_nprows, dbcsr_mp_numnodes, dbcsr_mp_pgrid, &
+       dbcsr_name, dbcsr_nblkcols_total, dbcsr_nblkrows_total, &
+       dbcsr_nfullcols_total, dbcsr_nfullrows_total, dbcsr_release, &
+       dbcsr_row_block_sizes, dbcsr_switch_data_area, dbcsr_valid_index
   USE dbcsr_mp_operations,             ONLY: dbcsr_allgatherv,&
                                              hybrid_alltoall_any,&
                                              hybrid_alltoall_c1,&
@@ -130,6 +134,7 @@
   PUBLIC :: dbcsr_replicate_all, dbcsr_distribute, dbcsr_datablock_redistribute, dbcsr_replicate
   PUBLIC :: dbcsr_make_dense, dbcsr_make_undense, dbcsr_make_images_dense
   PUBLIC :: dbcsr_make_images
+  PUBLIC :: dbcsr_fill, convert_to_block_row_distributed
 
 CONTAINS
 
@@ -3378,4 +3383,291 @@
     END SUBROUTINE cumsum_l
   END SUBROUTINE dbcsr_datablock_redistribute
 
+!==========================================================================================================
+!==========================================================================================================
+  SUBROUTINE dbcsr_fill (dblk, row_p, col_i, blk_p, nblks, darea_size, new_matrix, error)
+
+    TYPE(dbcsr_data_obj), INTENT(IN)         :: dblk
+    INTEGER, DIMENSION(:), INTENT(IN), &
+      POINTER                                :: row_p, col_i, blk_p
+    INTEGER                                  :: nblks, darea_size
+    TYPE(dbcsr_obj), INTENT(INOUT)           :: new_matrix
+    TYPE(dbcsr_error_type), INTENT(INOUT)    :: error
+
+    CHARACTER(LEN=*), PARAMETER :: routineN = 'dbcsr_fill', &
+      routineP = moduleN//':'//routineN
+    INTEGER, PARAMETER                       :: metalen = 2
+
+    COMPLEX(KIND=dp), DIMENSION(:), POINTER  :: c_dp
+    COMPLEX(KIND=sp), DIMENSION(:), POINTER  :: c_sp
+    INTEGER :: bcol, blk, blk_ps, blk_size, blks, block_p, brow, col_size, &
+      data_type, dst_p, end_ind, error_handler, meta_l, mp_group, &
+      nblkrows_total, numnodes, row_size, src_p, start_ind, stored_col_new, &
+      stored_row_new
+    INTEGER, ALLOCATABLE, DIMENSION(:)       :: rd_disp, recv_meta, rm_disp, &
+                                                sd_disp, sdp, send_meta, &
+                                                sm_disp, smp
+    INTEGER, ALLOCATABLE, DIMENSION(:, :)    :: recv_count, send_count, &
+                                                total_recv_count, &
+                                                total_send_count
+    INTEGER, DIMENSION(:), POINTER           :: col_blk_size, row_blk_size
+    LOGICAL                                  :: sym_tr, tr
+    REAL(KIND=dp), DIMENSION(:), POINTER     :: r_dp
+    REAL(KIND=sp), DIMENSION(:), POINTER     :: r_sp
+    TYPE(dbcsr_data_obj)                     :: data_block, recv_data, &
+                                                send_data
+    TYPE(dbcsr_distribution_obj)             :: dist
+    TYPE(dbcsr_mp_obj)                       :: mp_env
+
+    CALL dbcsr_error_set(routineN, error_handler, error)
+
+     dist = dbcsr_distribution (new_matrix)
+     mp_env = dbcsr_distribution_mp (dist)
+     numnodes = dbcsr_mp_numnodes (mp_env)
+     mp_group = dbcsr_mp_group (mp_env)
+  
+     data_type = dbcsr_get_data_type(new_matrix)
+     nblkrows_total = dbcsr_nblkrows_total(new_matrix)
+     row_blk_size => array_data (new_matrix%m%row_blk_size)
+     col_blk_size => array_data (new_matrix%m%col_blk_size)
+  
+     ALLOCATE (send_count(2, 0:numnodes-1))
+     ALLOCATE (recv_count(2, 0:numnodes-1))
+     ALLOCATE (total_send_count(2, 0:numnodes-1))
+     ALLOCATE (total_recv_count(2, 0:numnodes-1))
+     ALLOCATE (sdp(0:numnodes-1))
+     ALLOCATE (sd_disp(0:numnodes-1))
+     ALLOCATE (smp(0:numnodes-1))
+     ALLOCATE (sm_disp(0:numnodes-1))
+     ALLOCATE (rd_disp(0:numnodes-1))
+     ALLOCATE (rm_disp(0:numnodes-1))
+     send_count(:,:) = 0
+     dst_p = -1
+  
+     DO brow = 1, nblkrows_total
+        row_size = row_blk_size(brow)
+        DO blk = row_p(brow)+1, row_p(brow+1)
+           bcol = col_i(blk)
+           col_size = col_blk_size(bcol)
+           blk_size = row_size*col_size
+           block_p = ABS(blk_p(blk))
+           sym_tr = .FALSE.
+           CALL dbcsr_get_stored_coordinates (new_matrix%m, brow, bcol, sym_tr, dst_p)
+           send_count(1, dst_p) = send_count(1, dst_p) + 1
+           send_count(2, dst_p) = send_count(2, dst_p) + blk_size
+        END DO
+     END DO
+  
+     CALL mp_alltoall(send_count, recv_count, 2, mp_group)
+     CALL dbcsr_data_init (recv_data)
+     CALL dbcsr_data_new (recv_data, data_type, SUM(recv_count(2, :)))
+     ALLOCATE (recv_meta(metalen*SUM(recv_count(1, :))))
+     CALL dbcsr_data_init (send_data)
+     CALL dbcsr_data_new (send_data, data_type, SUM(send_count(2, :)))
+     ALLOCATE (send_meta(metalen*SUM(send_count(1, :))))
+     DO dst_p = 0, numnodes-1
+        total_send_count(1, dst_p) = send_count (1, dst_p)
+        total_send_count(2, dst_p) = send_count (2, dst_p)
+        total_recv_count(1, dst_p) = recv_count (1, dst_p)
+        total_recv_count(2, dst_p) = recv_count (2, dst_p)
+     END DO
+     sd_disp = -1 ; sm_disp = -1 ; rd_disp = -1 ; rm_disp = -1                                                             
+     sd_disp(0) = 1 ; sm_disp(0) = 1 ; rd_disp(0) = 1 ; rm_disp(0) = 1                        
+     DO dst_p = 1, numnodes-1                               
+        sm_disp(dst_p) = sm_disp(dst_p-1) + metalen*total_send_count(1, dst_p-1)
+        sd_disp(dst_p) = sd_disp(dst_p-1) + total_send_count(2, dst_p-1)
+        rm_disp(dst_p) = rm_disp(dst_p-1) + metalen*total_recv_count(1, dst_p-1)
+        rd_disp(dst_p) = rd_disp(dst_p-1) + total_recv_count(2, dst_p-1)
+     END DO
+     sdp(:) = sd_disp     
+     smp(:) = sm_disp - metalen  
+    
+     SELECT CASE (data_type)
+     CASE (dbcsr_type_real_4)
+          r_sp => dblk%d%r_sp
+     CASE (dbcsr_type_real_8)
+          r_dp => dblk%d%r_dp
+     CASE (dbcsr_type_complex_4)
+          c_sp => dblk%d%c_sp
+     CASE (dbcsr_type_complex_8)
+          c_dp => dblk%d%c_dp
+     END SELECT 
+  
+     CALL dbcsr_data_init (data_block)
+     CALL dbcsr_data_new (data_block, data_type)
+  
+     dst_p = -1
+     DO brow = 1, nblkrows_total
+        row_size = row_blk_size(brow)
+        DO blk = row_p(brow)+1, row_p(brow+1)
+           bcol = col_i(blk)
+           col_size = col_blk_size(bcol)
+           blk_size = row_size*col_size
+           block_p = ABS(blk_p(blk))
+!           block_p = blk_p(blk)
+           sym_tr = .FALSE.
+           CALL dbcsr_get_stored_coordinates(new_matrix%m, brow, bcol, sym_tr, dst_p)
+           smp(dst_p) = smp(dst_p) + metalen
+           start_ind = block_p
+           end_ind = block_p+blk_size-1
+  
+           SELECT CASE (data_type)
+           CASE (dbcsr_type_real_4)
+               data_block%d%r_sp => r_sp(start_ind:end_ind)
+           CASE (dbcsr_type_real_8)
+               data_block%d%r_dp => r_dp(start_ind:end_ind)
+           CASE (dbcsr_type_complex_4)
+               data_block%d%c_sp => c_sp(start_ind:end_ind)
+           CASE (dbcsr_type_complex_8)
+               data_block%d%c_dp => c_dp(start_ind:end_ind)
+           END SELECT
+!           tr = block_p .LT. 0
+           tr = .TRUE.
+           IF (tr) THEN
+              send_meta(smp(dst_p)) = -brow
+           ELSE
+               send_meta(smp(dst_p)) = brow
+           END IF
+           send_meta(smp(dst_p)+1) = bcol 
+           blk_size = dbcsr_data_get_size (data_block)
+  
+           CALL dbcsr_data_set (send_data, lb=sdp(dst_p), data_size=blk_size, src=data_block, source_lb=1)
+           sdp(dst_p) = sdp(dst_p) + blk_size
+        END DO
+     END DO
+  
+     SELECT CASE (data_type)
+     CASE (dbcsr_type_real_4)
+        CALL hybrid_alltoall_s1(&
+            send_data%d%r_sp(:), total_send_count(2,:), sd_disp(:)-1,&
+            recv_data%d%r_sp(:), total_recv_count(2,:), rd_disp(:)-1,&
+            mp_env)
+     CASE (dbcsr_type_real_8)
+        CALL hybrid_alltoall_d1 (&
+           send_data%d%r_dp(:), total_send_count(2,:), sd_disp(:)-1,&
+           recv_data%d%r_dp(:), total_recv_count(2,:), rd_disp(:)-1,&
+           mp_env)
+     CASE (dbcsr_type_complex_4)
+        CALL hybrid_alltoall_c1(&
+           send_data%d%c_sp(:), total_send_count(2,:), sd_disp(:)-1,&
+           recv_data%d%c_sp(:), total_recv_count(2,:), rd_disp(:)-1,&
+           mp_env)
+     CASE (dbcsr_type_complex_8)
+        CALL hybrid_alltoall_z1(&
+          send_data%d%c_dp(:), total_send_count(2,:), sd_disp(:)-1,&
+          recv_data%d%c_dp(:), total_recv_count(2,:), rd_disp(:)-1,&
+          mp_env)
+     END SELECT         
+     CALL hybrid_alltoall_i1(send_meta(:), metalen*total_send_count(1,:), sm_disp(:)-1,&
+                             recv_meta(:), metalen*total_recv_count(1,:), rm_disp(:)-1, mp_env)
+     CALL dbcsr_work_create(new_matrix,SUM(recv_count(1,:)),&
+                            SUM(recv_count(2,:)), work_mutable=.FALSE., n=1, error=error)
+  
+     blk_ps = 1
+     blks = 0
+     DO src_p = 0, numnodes-1
+        DO meta_l = 1, recv_count(1, src_p)
+           brow = recv_meta(rm_disp(src_p)+metalen*(meta_l-1))
+           tr = brow .LT. 0
+           stored_row_new = ABS(brow)
+           stored_col_new = recv_meta(rm_disp(src_p)+metalen*(meta_l-1)+1)
+           blk_size = row_blk_size(stored_row_new) * col_blk_size(stored_col_new)
+  
+           data_block = pointer_view (data_block, recv_data, blk_ps, blk_size)
+           CALL dbcsr_put_block(new_matrix, stored_row_new, stored_col_new, data_block, tr)
+  
+           blk_ps = blk_ps + blk_size
+           blks = blks + 1
+        END DO
+     END DO
+     CALL dbcsr_data_clear_pointer (data_block)
+     DEALLOCATE (data_block%d)
+     CALL dbcsr_finalize(new_matrix, reshuffle=.TRUE., error=error)
+     CALL dbcsr_data_release (recv_data)
+     CALL dbcsr_data_release (send_data)
+  
+     DEALLOCATE(send_count)
+     DEALLOCATE(recv_count)
+     DEALLOCATE(sdp); DEALLOCATE(sd_disp)
+     DEALLOCATE(smp); DEALLOCATE(sm_disp)
+     DEALLOCATE(rd_disp)
+     DEALLOCATE(rm_disp)
+     DEALLOCATE(recv_meta)
+     DEALLOCATE(send_meta)
+  
+    CALL dbcsr_error_stop(error_handler, error)
+  
+  END SUBROUTINE dbcsr_fill
+
+  SUBROUTINE convert_to_block_row_distributed (dbcsr_mat, brd_mat, error)
+  
+  
+    TYPE(dbcsr_obj), INTENT(IN)              :: dbcsr_mat
+    TYPE(dbcsr_obj), INTENT(OUT)             :: brd_mat
+    TYPE(dbcsr_error_type), INTENT(INOUT)    :: error
+
+    CHARACTER(LEN=*), PARAMETER :: &
+      routineN = 'convert_to_block_row_distributed', &
+      routineP = moduleN//':'//routineN
+
+    CHARACTER                                :: matrix_type
+    CHARACTER(LEN=default_string_length)     :: matrix_name
+    INTEGER :: chunk_size, data_type, error_handler, i, mp_group, mynode, &
+      nblkcols_total, nblkrows_total, num_p, remainder, row_index
+    INTEGER, ALLOCATABLE, DIMENSION(:)       :: cdist, rdist
+    INTEGER, ALLOCATABLE, DIMENSION(:, :)    :: pgrid
+    TYPE(array_i1d_obj)                      :: brd_col_dist, brd_row_dist, &
+                                                col_blk_size, row_blk_size
+    TYPE(dbcsr_distribution_obj)             :: dist_current, dist_new
+    TYPE(dbcsr_mp_obj)                       :: mp_obj_current, mp_obj_new
+
+    CALL dbcsr_error_set(routineN, error_handler, error)
+
+    CALL dbcsr_get_info(dbcsr_mat,nblkrows_total=nblkrows_total,nblkcols_total=nblkcols_total,&
+                        row_blk_size = row_blk_size, col_blk_size = col_blk_size, &
+                        matrix_type = matrix_type, data_type = data_type)
+    matrix_name = dbcsr_name(dbcsr_mat)
+  
+    ALLOCATE (rdist(nblkrows_total), cdist(nblkcols_total))
+    CALL array_nullify (brd_row_dist)
+    CALL array_nullify (brd_col_dist)
+  
+    dist_current = dbcsr_distribution(dbcsr_mat)
+    mp_obj_current = dbcsr_distribution_mp(dist_current)
+    mp_group = dbcsr_mp_group(mp_obj_current)
+    num_p = dbcsr_mp_numnodes(mp_obj_current)
+    mynode = dbcsr_mp_mynode(mp_obj_current)
+
+    ALLOCATE (pgrid(num_p,1))
+    cdist = 0
+    rdist = 0 
+    chunk_size = FLOOR(REAL(nblkrows_total)/num_p)
+    remainder = MOD(nblkrows_total,num_p)
+    row_index = 0
+    DO i = 1, chunk_size*num_p, chunk_size
+      rdist(i:i+chunk_size-1) = row_index
+      row_index = row_index + 1
+    END DO
+    IF (remainder .GT. 0) rdist(chunk_size*num_p+1:nblkrows_total) = row_index-1
+    CALL array_new (brd_row_dist, rdist, lb=1)
+    CALL array_new (brd_col_dist, cdist, lb=1)
+    pgrid = RESHAPE((/(i, i = 0, num_p-1),0/),(/num_p,1/))
+
+    CALL dbcsr_mp_new(mp_obj_new, pgrid, mp_group, mynode, numnodes=num_p)
+    CALL dbcsr_distribution_init(dist_new)
+    CALL dbcsr_distribution_new(dist_new,mp_obj_new,brd_row_dist,brd_col_dist)
+  
+    CALL dbcsr_init(brd_mat)
+    CALL dbcsr_create (brd_mat, TRIM(matrix_name)//" row-block distributed", dist_new, matrix_type, &
+                       row_blk_size, col_blk_size, error=error)
+    CALL dbcsr_complete_redistribute(dbcsr_mat,brd_mat,error=error)
+  
+    DEALLOCATE (pgrid)
+    DEALLOCATE (rdist,cdist)
+    CALL array_release(brd_row_dist)
+    CALL array_release(brd_col_dist)  
+    CALL dbcsr_error_stop(error_handler, error)
+
+  END SUBROUTINE convert_to_block_row_distributed
+
 END MODULE dbcsr_transformations
Index: dm_ls_scf.F
===================================================================
--- dm_ls_scf.F	(revision 12966)
+++ dm_ls_scf.F	(working copy)
@@ -16,13 +16,19 @@
                                              Shao2003,&
                                              VandeVondele2012,&
                                              cite_reference
+  USE c_dbcsr_methods
+  USE c_dbcsr_types
   USE cp_control_types,                ONLY: dft_control_type
   USE cp_dbcsr_interface,              ONLY: &
        cp_dbcsr_add, cp_dbcsr_add_on_diag, cp_dbcsr_binary_read, &
        cp_dbcsr_binary_write, cp_dbcsr_checksum, cp_dbcsr_copy, &
        cp_dbcsr_create, cp_dbcsr_distribution, cp_dbcsr_filter, &
        cp_dbcsr_frobenius_norm, cp_dbcsr_get_occupation, cp_dbcsr_init, &
-       cp_dbcsr_multiply, cp_dbcsr_release, cp_dbcsr_scale, cp_dbcsr_set
+       cp_dbcsr_multiply, cp_dbcsr_release, cp_dbcsr_scale, cp_dbcsr_set,&
+       cp_dbcsr_copy_into_existing, cp_dbcsr_desymmetrize,&
+       cp_dbcsr_maxabs, cp_dbcsr_name, cp_dbcsr_get_matrix_type,&
+       cp_dbcsr_nblkrows_total,&
+cp_dbcsr_print
   USE cp_dbcsr_types,                  ONLY: cp_dbcsr_p_type,&
                                              cp_dbcsr_type
   USE cp_dbcsr_util,                   ONLY: lanczos_alg_serial
@@ -73,6 +79,10 @@
   USE qs_scf_post_gpw,                 ONLY: write_mo_free_results
   USE timings,                         ONLY: timeset,&
                                              timestop
+  USE dbcsr_error_handling,            ONLY: dbcsr_error_type
+  USE dbcsr_transformations,           ONLY: convert_to_block_row_distributed
+  USE, INTRINSIC :: ISO_C_BINDING
+use dbcsr_io, only: dbcsr_print
 #include "cp_common_uses.h"
 
   IMPLICIT NONE
@@ -647,6 +657,7 @@
     CALL section_vals_val_get(ls_scf_section,"DYNAMIC_THRESHOLD",l_val=ls_scf_env%dynamic_threshold,error=error)
     CALL section_vals_val_get(ls_scf_section,"SIGN_SQRT_ORDER",i_val=ls_scf_env%sign_sqrt_order,error=error)
     CALL section_vals_val_get(ls_scf_section,"EXTRAPOLATION_ORDER",i_val=ls_scf_env%extrapolation_order,error=error)
+    CALL section_vals_val_get(ls_scf_section,"EXTERNAL_SCF",l_val=ls_scf_env%external_scf,error=error)
     CALL section_vals_val_get(ls_scf_section,"RESTART_READ",l_val=ls_scf_env%restart_read,error=error)
     CALL section_vals_val_get(ls_scf_section,"RESTART_WRITE",l_val=ls_scf_env%restart_write,error=error)
     CALL section_vals_val_get(ls_scf_section,"EPS_LANCZOS",r_val=ls_scf_env%eps_lanczos,error=error)
@@ -856,11 +867,8 @@
          ENDIF
          CALL cp_dbcsr_filter(ls_scf_env%matrix_ks(ispin),ls_scf_env%eps_filter,error=error)
       ENDDO
-      ! run curvy steps if required. Needs an idempotent DM (either perification or restart)
-      IF((iscf>1.OR.ls_scf_env%scf_history%istore>0).AND.ls_scf_env%curvy_steps)THEN
-         CALL dm_ls_curvy_optimization(ls_scf_env,energy_old,check_convergence,error)
-      ELSE
-         ! turn the KS matrix in a density matrix
+
+     IF (ls_scf_env%external_scf) THEN
          DO ispin=1,nspin
             IF (iscf==1) THEN
                ! initialize the mixing matrix with the current state if needed
@@ -871,36 +879,59 @@
                                  1.0_dp-ls_scf_env%mixing_fraction,ls_scf_env%mixing_fraction, &
                                  error=error)
             ENDIF
-
-            ! compute the density matrix that matches it
-            ! we need the proper number of states
-            nelectron_spin_real=ls_scf_env%nelectron_spin(ispin)
-            IF (ls_scf_env%nspins==1) nelectron_spin_real=nelectron_spin_real/2
-
-            SELECT CASE(ls_scf_env%purification_method)
-            CASE(ls_scf_ns)
-              CALL density_matrix_sign(ls_scf_env%matrix_p(ispin),ls_scf_env%mu_spin(ispin), ls_scf_env%fixed_mu, &
-                                       matrix_mixing_old(ispin),ls_scf_env%matrix_s, ls_scf_env%matrix_s_inv, &
-                                       nelectron_spin_real,ls_scf_env%eps_filter,error)
-            CASE(ls_scf_trs4)
-              CALL density_matrix_trs4(ls_scf_env%matrix_p(ispin), matrix_mixing_old(ispin),  ls_scf_env%matrix_s_sqrt_inv,&
-                                       nelectron_spin_real, ls_scf_env%eps_filter, ls_scf_env%homo_spin(ispin),&
-                                       ls_scf_env%lumo_spin(ispin), ls_scf_env%mu_spin(ispin), &
-                                       dynamic_threshold=ls_scf_env%dynamic_threshold,&
-                                       matrix_ks_deviation=matrix_ks_deviation(ispin), &
-                                       eps_lanczos=ls_scf_env%eps_lanczos, max_iter_lanczos=ls_scf_env%max_iter_lanczos,&
-                                       error=error)
-            END SELECT
-                                     
-            IF (ls_scf_env%has_s_preconditioner) THEN
-                CALL apply_matrix_preconditioner(ls_scf_env%matrix_p(ispin),"forward", &
-                               ls_scf_env%matrix_bs_sqrt,ls_scf_env%matrix_bs_sqrt_inv,error)
-            ENDIF
-            CALL cp_dbcsr_filter(ls_scf_env%matrix_p(ispin),ls_scf_env%eps_filter,error=error)
+            ! input the current kohn sham matrix (ks) output matrix_p and should_stop
+            CALL external_scf_method(ls_scf_env,error)
+!            CALL external_scf_method(ls_scf_env%external_method_env, ls_scf_env%matrix_ks, ls_scf_env%matrix_s, &
+!                                     ls_scf_env%matrix_p, ls_scf_env%nelectron_spin, should_stop)
+            IF (ls_scf_env%nspins==1) CALL cp_dbcsr_scale(ls_scf_env%matrix_p(ispin),2.0_dp,error=error)
+         END DO
+      ELSE
+         ! run curvy steps if required. Needs an idempotent DM (either perification or restart)
+         IF((iscf>1.OR.ls_scf_env%scf_history%istore>0).AND.ls_scf_env%curvy_steps)THEN
+            CALL dm_ls_curvy_optimization(ls_scf_env,energy_old,check_convergence,error)
+         ELSE
+            ! turn the KS matrix in a density matrix
+            DO ispin=1,nspin
+               IF (iscf==1) THEN
+                  ! initialize the mixing matrix with the current state if needed
+                  CALL cp_dbcsr_copy(matrix_mixing_old(ispin), ls_scf_env%matrix_ks(ispin), error=error)
+               ELSE
+                  ! perform the mixing of ks matrices
+                  CALL cp_dbcsr_add(matrix_mixing_old(ispin), ls_scf_env%matrix_ks(ispin), &
+                                    1.0_dp-ls_scf_env%mixing_fraction,ls_scf_env%mixing_fraction, &
+                                    error=error)
+               ENDIF
    
-            IF (ls_scf_env%nspins==1) CALL cp_dbcsr_scale(ls_scf_env%matrix_p(ispin),2.0_dp,error=error)
-
-         ENDDO
+               ! compute the density matrix that matches it
+               ! we need the proper number of states
+               nelectron_spin_real=ls_scf_env%nelectron_spin(ispin)
+               IF (ls_scf_env%nspins==1) nelectron_spin_real=nelectron_spin_real/2
+   
+               SELECT CASE(ls_scf_env%purification_method)
+               CASE(ls_scf_ns)
+                 CALL density_matrix_sign(ls_scf_env%matrix_p(ispin),ls_scf_env%mu_spin(ispin), ls_scf_env%fixed_mu, &
+                                          matrix_mixing_old(ispin),ls_scf_env%matrix_s, ls_scf_env%matrix_s_inv, &
+                                          nelectron_spin_real,ls_scf_env%eps_filter,error)
+               CASE(ls_scf_trs4)
+                 CALL density_matrix_trs4(ls_scf_env%matrix_p(ispin), matrix_mixing_old(ispin),  ls_scf_env%matrix_s_sqrt_inv,&
+                                          nelectron_spin_real, ls_scf_env%eps_filter, ls_scf_env%homo_spin(ispin),&
+                                          ls_scf_env%lumo_spin(ispin), ls_scf_env%mu_spin(ispin), &
+                                          dynamic_threshold=ls_scf_env%dynamic_threshold,&
+                                          matrix_ks_deviation=matrix_ks_deviation(ispin), &
+                                          eps_lanczos=ls_scf_env%eps_lanczos, max_iter_lanczos=ls_scf_env%max_iter_lanczos,&
+                                          error=error)
+               END SELECT
+                                        
+               IF (ls_scf_env%has_s_preconditioner) THEN
+                   CALL apply_matrix_preconditioner(ls_scf_env%matrix_p(ispin),"forward", &
+                                  ls_scf_env%matrix_bs_sqrt,ls_scf_env%matrix_bs_sqrt_inv,error)
+               ENDIF
+               CALL cp_dbcsr_filter(ls_scf_env%matrix_p(ispin),ls_scf_env%eps_filter,error=error)
+      
+               IF (ls_scf_env%nspins==1) CALL cp_dbcsr_scale(ls_scf_env%matrix_p(ispin),2.0_dp,error=error)
+   
+            ENDDO
+         END IF
       END IF
 
       ! compute the corresponding new energy KS matrix and new energy
@@ -918,6 +949,7 @@
       ENDIF
 
       ! exit criterium on the energy only for the time being
+!      IF ((check_convergence.AND.ABS(energy_diff)<ls_scf_env%eps_scf*ls_scf_env%nelectron_total) .OR. should_stop) EXIT
       IF (check_convergence.AND.ABS(energy_diff)<ls_scf_env%eps_scf*ls_scf_env%nelectron_total) EXIT
 
     ENDDO
@@ -1419,4 +1451,145 @@
 
   END SUBROUTINE post_scf_experiment
 
+!==================================================================================
+  SUBROUTINE external_csr_write(qs_env,error)
+  
+    INTERFACE c_func_interface
+      SUBROUTINE c_scf_routine(S_matrix_cDBCSR, H_matrix_cDBCSR, P_matrix_cDBCSR) bind(C)
+        IMPORT :: C_INT, C_DOUBLE, C_PTR, c_DBCSR
+        IMPLICIT NONE
+        TYPE(c_DBCSR), VALUE , INTENT(IN)  :: S_matrix_cDBCSR, H_matrix_cDBCSR
+        TYPE(c_DBCSR)  :: P_matrix_cDBCSR
+      END SUBROUTINE c_scf_routine
+    END INTERFACE c_func_interface
+  
+    TYPE(qs_environment_type), POINTER, INTENT(IN)    :: qs_env
+    TYPE(cp_error_type), INTENT(INOUT)     :: error
+    TYPE(dbcsr_error_type)                 :: err
+    TYPE(c_DBCSR)                          :: S_cDBCSR, H_cDBCSR, P_cDBCSR
+    TYPE(cp_dbcsr_type)                    :: matrix_s_brd, matrix_s_nosym, matrix_h_brd, matrix_h_nosym
+    TYPE(cp_logger_type), POINTER          :: logger
+    PROCEDURE(c_scf_routine), POINTER      :: cfun
+    TYPE(C_FUNPTR)                         :: func
+    INTEGER :: handle
+    INTEGER                                :: getval
+  
+    CHARACTER(len=*), PARAMETER :: routineN = 'external_csr_write', &
+        routineP = moduleN//':'//routineN
+  
+    CALL timeset(routineN,handle)
+  
+    logger => cp_error_get_logger(error)
+    func = qs_env%ls_scf_env%ext_scf_ptr    
+    CALL C_F_PROCPOINTER(func, cfun) 
+  
+    CALL cp_dbcsr_init (matrix_s_nosym, error=error)
+    CALL cp_dbcsr_create (matrix_s_nosym, template=qs_env%matrix_s(1)%matrix, matrix_type=dbcsr_type_no_symmetry, error=error)
+    CALL cp_dbcsr_desymmetrize(qs_env%matrix_s(1)%matrix,matrix_s_nosym,error)
+    CALL cp_dbcsr_init (matrix_h_nosym, error=error)
+    CALL cp_dbcsr_create (matrix_h_nosym, template=qs_env%matrix_h(1)%matrix, matrix_type=dbcsr_type_no_symmetry, error=error)
+    CALL cp_dbcsr_desymmetrize(qs_env%matrix_h(1)%matrix,matrix_h_nosym,error)
+  
+    CALL convert_to_block_row_distributed (matrix_s_nosym%matrix, matrix_s_brd%matrix, err)
+    CALL convert_to_block_row_distributed (matrix_h_nosym%matrix, matrix_h_brd%matrix, err)
+    CALL cDBCSR_nullify (S_cDBCSR)
+    CALL cDBCSR_nullify (H_cDBCSR)
+    CALL cDBCSR_new (matrix_s_brd, S_cDBCSR, error)
+    CALL cDBCSR_new (matrix_h_brd, H_cDBCSR, error)
+  
+    CALL cfun(S_cDBCSR, H_cDBCSR, P_cDBCSR)
+  
+  ! *** remember cp_dbcsr_release
+    CALL timestop(handle)
+  
+  END SUBROUTINE external_csr_write
+
+!==================================================================================
+  SUBROUTINE external_scf_method(ls_scf_env,error)
+  
+    INTERFACE c_func_interface
+      SUBROUTINE c_scf_routine(S_matrix_cDBCSR, KS_matrix_cDBCSR, P_matrix_cDBCSR) bind(C)
+        IMPORT :: C_INT, C_DOUBLE, C_PTR, c_DBCSR
+        IMPLICIT NONE
+        TYPE(c_DBCSR), VALUE , INTENT(IN)  :: S_matrix_cDBCSR, KS_matrix_cDBCSR
+        TYPE(c_DBCSR)  :: P_matrix_cDBCSR
+      END SUBROUTINE c_scf_routine
+    END INTERFACE c_func_interface
+  
+    TYPE(ls_scf_env_type), INTENT(INOUT)   :: ls_scf_env
+    TYPE(cp_error_type), INTENT(INOUT)     :: error
+    TYPE(dbcsr_error_type)                 :: err
+    TYPE(c_DBCSR)                          :: S_cDBCSR, KS_cDBCSR, P_cDBCSR
+    TYPE(cp_dbcsr_type)                    :: matrix_s_brd, matrix_ks_brd, matrix_s_nosym, matrix_ks_nosym
+    TYPE(cp_dbcsr_type)                    :: matrix_tmp
+    TYPE(cp_logger_type), POINTER          :: logger
+    PROCEDURE(c_scf_routine), POINTER      :: cfun
+    TYPE(C_FUNPTR)                         :: func
+    INTEGER :: handle
+  
+    CHARACTER(len=*), PARAMETER :: routineN = 'external_scf_method', &
+        routineP = moduleN//':'//routineN
+
+    REAL(dp) :: diff_norm
+  
+    CALL timeset(routineN,handle)
+  
+    logger => cp_error_get_logger(error)
+    func = ls_scf_env%ext_scf_ptr    
+    CALL C_F_PROCPOINTER(func, cfun) 
+  
+    CALL cp_dbcsr_init (matrix_s_nosym, error=error)
+    CALL cp_dbcsr_create (matrix_s_nosym, template=ls_scf_env%matrix_s, matrix_type=dbcsr_type_no_symmetry, error=error)
+    CALL cp_dbcsr_desymmetrize(ls_scf_env%matrix_s,matrix_s_nosym,error)
+    CALL cp_dbcsr_init (matrix_ks_nosym, error=error)
+    CALL cp_dbcsr_create (matrix_ks_nosym, template=ls_scf_env%matrix_ks(1), matrix_type=dbcsr_type_no_symmetry, error=error)
+    CALL cp_dbcsr_desymmetrize(ls_scf_env%matrix_ks(1),matrix_ks_nosym,error)
+
+    CALL convert_to_block_row_distributed (matrix_s_nosym%matrix, matrix_s_brd%matrix, err)
+    CALL convert_to_block_row_distributed (matrix_ks_nosym%matrix, matrix_ks_brd%matrix, err)
+    CALL cDBCSR_nullify (S_cDBCSR)
+    CALL cDBCSR_nullify (KS_cDBCSR)
+    CALL cDBCSR_new (matrix_s_brd, S_cDBCSR, error)
+    CALL cDBCSR_new (matrix_ks_brd, KS_cDBCSR, error)
+  
+    CALL cfun(S_cDBCSR, KS_cDBCSR, P_cDBCSR)
+
+    CALL cp_dbcsr_init(matrix_tmp,error=error)
+!    CALL cDBCSR_to_dbcsr (P_cDBCSR, matrix_tmp, &
+!                          cp_dbcsr_name(ls_scf_env%matrix_ks(1)), cp_dbcsr_get_matrix_type(matrix_ks_nosym),&
+!                          cp_dbcsr_distribution(matrix_ks_nosym), error)
+!! first test ***
+!    CALL cp_dbcsr_add(matrix_tmp,matrix_ks_nosym,1.0_dp,-1.0_dp,error)
+!    diff_norm = cp_dbcsr_maxabs(matrix_tmp)
+!    write(*,*) "norm = ", diff_norm
+! second test ***
+!    CALL cp_dbcsr_copy_into_existing(ls_scf_env%matrix_ks(1), matrix_tmp, error=error)
+  
+!    CALL cDBCSR_to_dbcsr (P_cDBCSR, matrix_tmp, &
+!                          cp_dbcsr_name(ls_scf_env%matrix_p(1)), cp_dbcsr_get_matrix_type(matrix_s_nosym),&
+!                          cp_dbcsr_distribution(matrix_s_nosym), error)
+!!write(*,*) matrix_tmp%matrix%m%data_area%d%r_dp
+!!call cp_dbcsr_print(matrix_tmp,matlab_format=.true.,error=error)
+!    CALL cp_dbcsr_add(matrix_tmp,matrix_p_nosym,1.0_dp,-1.0_dp,error)
+!!write(*,*) matrix_p_nosym%matrix%m%data_area%d%r_dp
+!    diff_norm = cp_dbcsr_maxabs(matrix_tmp)
+!    write(*,*) "norm = ", diff_norm
+
+! actual thing
+    CALL cDBCSR_to_dbcsr (P_cDBCSR, matrix_tmp, &
+                          cp_dbcsr_name(ls_scf_env%matrix_p(1)), cp_dbcsr_get_matrix_type(matrix_s_nosym),&
+                          cp_dbcsr_distribution(matrix_s_nosym), error)
+    CALL cp_dbcsr_copy(ls_scf_env%matrix_p(1),matrix_tmp, error=error)
+
+    CALL cp_dbcsr_release(matrix_tmp, error=error)
+    CALL cp_dbcsr_release(matrix_s_nosym, error=error)
+    CALL cp_dbcsr_release(matrix_s_brd, error=error)
+    CALL cp_dbcsr_release(matrix_ks_nosym, error=error)
+    CALL cp_dbcsr_release(matrix_ks_brd, error=error)
+
+! probably something like cDBCSR_release is needed    
+    CALL timestop(handle)
+  
+  END SUBROUTINE external_scf_method
+
 END MODULE dm_ls_scf
Index: input_cp2k_ls.F
===================================================================
--- input_cp2k_ls.F	(revision 12966)
+++ input_cp2k_ls.F	(working copy)
@@ -112,6 +112,12 @@
        CALL section_add_keyword(section,keyword,error=error)
        CALL keyword_release(keyword,error=error)
 
+       CALL keyword_create(keyword, name="EXTERNAL_SCF",&
+            description="Use an SCF routine that was registered by an external tool.",&
+            usage="EXTERNAL_SCF .TRUE.", default_l_val=.FALSE., lone_keyword_l_val=.TRUE.,  error=error)
+       CALL section_add_keyword(section,keyword,error=error)
+       CALL keyword_release(keyword,error=error)
+
        CALL keyword_create(keyword, name="EXTRAPOLATION_ORDER",&
             description="Number of previous matrices used for the ASPC extrapolation of the initial guess. "//&
                         "0 implies that an atomic guess is used at each step. "//&
Index: OBJECTDEFS
===================================================================
--- OBJECTDEFS	(revision 12966)
+++ OBJECTDEFS	(working copy)
@@ -57,6 +57,7 @@
  cg_optimizer.o\
  cg_test.o\
  cg_utils.o\
+ c_int_low.o\
  c_mpi_calls.o\
  colvar_methods.o\
  colvar_types.o\
@@ -800,4 +801,6 @@
  list.o\
  dict_str_i4.o\
  dict_i4tuple_callstat.o\
- dict.o
+ dict.o\
+ c_dbcsr_types.o\
+ c_dbcsr_methods.o
Index: dm_ls_scf_types.F
===================================================================
--- dm_ls_scf_types.F	(revision 12966)
+++ dm_ls_scf_types.F	(working copy)
@@ -11,6 +11,7 @@
 !> \author Joost VandeVondele
 ! *****************************************************************************
 MODULE dm_ls_scf_types
+  USE ISO_C_BINDING,                   ONLY: c_funptr
   USE cp_dbcsr_interface,              ONLY: cp_dbcsr_release
   USE cp_dbcsr_types,                  ONLY: cp_dbcsr_type
   USE cp_para_env,                     ONLY: cp_para_env_release
@@ -89,6 +90,7 @@
      TYPE(ls_mat_history_type) :: scf_history
      INTEGER :: extrapolation_order
 
+     LOGICAL :: external_scf
      LOGICAL :: has_unit_metric
 
      LOGICAL :: curvy_steps
@@ -123,6 +125,7 @@
      TYPE(chebyshev_type) :: chebyshev
 
      TYPE(cp_para_env_type), POINTER :: para_env
+     TYPE(c_funptr) :: ext_scf_ptr
   END TYPE ls_scf_env_type
 
   PUBLIC :: ls_scf_release
