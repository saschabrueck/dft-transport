Index: dm_ls_scf.F
===================================================================
--- dm_ls_scf.F	(revision 14813)
+++ dm_ls_scf.F	(working copy)
@@ -78,6 +78,9 @@
                                              write_mo_free_results
   USE timings,                         ONLY: timeset,&
                                              timestop
+  USE transport,                       ONLY: external_scf_method,&
+                                             transport_initialize
+  USE transport_env_types,             ONLY: transport_env_type
 #include "./common/cp_common_uses.f90"
 
   IMPLICIT NONE
@@ -284,6 +287,10 @@
     ! get the initial guess for the SCF
     CALL ls_scf_initial_guess(qs_env,ls_scf_env,error)
 
+    IF (qs_env%do_transport) THEN
+       CALL transport_initialize(qs_env%transport_env, ls_scf_env%matrix_s, error)
+    END IF
+
     CALL timestop(handle)
 
   END SUBROUTINE ls_scf_init_scf
@@ -835,7 +842,7 @@
                                                 nelectron_spin_real, nmixing, &
                                                 nspin, unit_nr
     LOGICAL                                  :: check_convergence, diis_step, &
-                                                should_stop
+                                                do_transport, should_stop
     REAL(KIND=dp)                            :: energy_diff, energy_new, &
                                                 energy_old, eps_diis, t1, t2
     TYPE(cp_dbcsr_p_type), DIMENSION(:), &
@@ -846,6 +853,7 @@
     TYPE(cp_logger_type), POINTER            :: logger
     TYPE(qs_diis_buffer_type_sparse), &
       POINTER                                :: diis_buffer
+    TYPE(transport_env_type), POINTER        :: transport_env
 
     CALL timeset(routineN,handle)
 
@@ -889,6 +897,9 @@
      CALL qs_diis_b_clear_sparse(diis_buffer,error=error)
      CALL get_qs_env(qs_env,matrix_s=matrix_s,error=error)
     END IF
+
+    CALL get_qs_env(qs_env, transport_env=transport_env, do_transport=do_transport, error=error)
+
     ! the real SCF loop
     DO
 
@@ -912,109 +923,152 @@
          ENDIF
          CALL cp_dbcsr_filter(ls_scf_env%matrix_ks(ispin),ls_scf_env%eps_filter,error=error)
       ENDDO
-      ! run curvy steps if required. Needs an idempotent DM (either perification or restart)
-      IF((iscf>1.OR.ls_scf_env%scf_history%istore>0).AND.ls_scf_env%curvy_steps)THEN
-         CALL dm_ls_curvy_optimization(ls_scf_env,energy_old,check_convergence,error)
-      ELSE
-         ! turn the KS matrix in a density matrix
+
+      IF (do_transport) THEN
+!         CALL cp_assert(.NOT.(ls_scf_env%has_s_preconditioner),cp_failure_level,cp_assertion_failed,&
+!                      routineP,"NOT YET IMPLEMENTED with S preconditioner. ", error, failure)
          DO ispin=1,nspin
             IF (iscf==1) THEN
                ! initialize the mixing matrix with the current state if needed
                CALL cp_dbcsr_copy(matrix_mixing_old(ispin), ls_scf_env%matrix_ks(ispin), error=error)
             ELSE
-             IF (ls_scf_env%ls_diis) THEN ! ------- IF-DIIS+MIX--- START
-              IF (diis_step.and.(iscf-1).ge.ls_scf_env%iter_ini_diis) THEN
                IF (unit_nr>0) THEN
-                WRITE(unit_nr,'(A61)') &
-                       '*************************************************************'
-                WRITE(unit_nr,'(A50,2(I3,A1),L1,A1)') &
-                       " Using DIIS mixed KS:  (iscf,INI_DIIS,DIIS_STEP)=(" , &
-                       iscf,",",ls_scf_env%iter_ini_diis,",",diis_step,")"
-                WRITE(unit_nr,'(A52)') &
-                       " KS_nw= DIIS-Linear-Combination-Previous KS matrices"
-                WRITE(unit_nr,'(61A)') &
-                       "*************************************************************"
+                  WRITE(unit_nr,'(A57)') &
+                       "*********************************************************"
+                  WRITE(unit_nr,'(A23,F5.3,A25,I3)') &
+                       " Using MIXING_FRACTION=", ls_scf_env%mixing_fraction, &
+                       " to mix KS matrix:  iscf=",iscf
+                  WRITE(unit_nr,'(A7,F5.3,A6,F5.3,A7)') &
+                       " KS_nw=",ls_scf_env%mixing_fraction,"*KS + ", &
+                       1.0_dp-ls_scf_env%mixing_fraction,"*KS_old"
+                  WRITE(unit_nr,'(A57)') &
+                       "*********************************************************"
                ENDIF
-               CALL cp_dbcsr_copy(matrix_mixing_old(ispin),   & ! out
-                                  ls_scf_env%matrix_ks(ispin),& ! in
-                                  error=error)
-              ELSE
-               IF (unit_nr>0) THEN
-                WRITE(unit_nr,'(A57)') &
-                      "*********************************************************"
-                WRITE(unit_nr,'(A23,F5.3,A25,I3)') &
-                      " Using MIXING_FRACTION=",ls_scf_env%mixing_fraction, &
-                      " to mix KS matrix:  iscf=",iscf 
-                WRITE(unit_nr,'(A7,F5.3,A6,F5.3,A7)') &
-                      " KS_nw=",ls_scf_env%mixing_fraction,"*KS + ", &
-                      1.0_dp-ls_scf_env%mixing_fraction,"*KS_old"
-                WRITE(unit_nr,'(A57)') &
-                      "*********************************************************"
-               ENDIF
                ! perform the mixing of ks matrices
-               CALL cp_dbcsr_add(matrix_mixing_old(ispin)   ,       &
-                                 ls_scf_env%matrix_ks(ispin),       &
-                                 1.0_dp-ls_scf_env%mixing_fraction, &
-                                 ls_scf_env%mixing_fraction,        &
+               CALL cp_dbcsr_add(matrix_mixing_old(ispin), ls_scf_env%matrix_ks(ispin), &
+                                 1.0_dp-ls_scf_env%mixing_fraction,ls_scf_env%mixing_fraction, &
                                  error=error)
-              ENDIF
-             ELSE ! otherwise
-               IF (unit_nr>0) THEN
-                WRITE(unit_nr,'(A57)') &
-                      "*********************************************************"
-                WRITE(unit_nr,'(A23,F5.3,A25,I3)') &
-                      " Using MIXING_FRACTION=", ls_scf_env%mixing_fraction, &
-                      " to mix KS matrix:  iscf=",iscf
-                WRITE(unit_nr,'(A7,F5.3,A6,F5.3,A7)') &
-                      " KS_nw=",ls_scf_env%mixing_fraction,"*KS + ", &
-                      1.0_dp-ls_scf_env%mixing_fraction,"*KS_old"
-                WRITE(unit_nr,'(A57)') &
-                      "*********************************************************"
-               ENDIF
-               ! perform the mixing of ks matrices
-               CALL cp_dbcsr_add(matrix_mixing_old(ispin)   ,       &
-                                 ls_scf_env%matrix_ks(ispin),       &
-                                 1.0_dp-ls_scf_env%mixing_fraction, &
-                                 ls_scf_env%mixing_fraction,        &
-                                 error=error)
-             ENDIF ! ------- IF-DIIS+MIX--- END
             ENDIF
 
-            ! compute the density matrix that matches it
-            ! we need the proper number of states
             nelectron_spin_real=ls_scf_env%nelectron_spin(ispin)
             IF (ls_scf_env%nspins==1) nelectron_spin_real=nelectron_spin_real/2
 
-            SELECT CASE(ls_scf_env%purification_method)
-            CASE(ls_scf_ns)
-              CALL density_matrix_sign(ls_scf_env%matrix_p(ispin),ls_scf_env%mu_spin(ispin), ls_scf_env%fixed_mu, &
-                                       matrix_mixing_old(ispin),ls_scf_env%matrix_s, ls_scf_env%matrix_s_inv, &
-                                       nelectron_spin_real,ls_scf_env%eps_filter,error)
-            CASE(ls_scf_tc2)
-              CALL density_matrix_tc2(ls_scf_env%matrix_p(ispin), matrix_mixing_old(ispin),  ls_scf_env%matrix_s_sqrt_inv,&
-                                       nelectron_spin_real, ls_scf_env%eps_filter, ls_scf_env%homo_spin(ispin),&
-                                       ls_scf_env%lumo_spin(ispin), non_monotonic=ls_scf_env%non_monotonic, &
-                                       eps_lanczos=ls_scf_env%eps_lanczos, max_iter_lanczos=ls_scf_env%max_iter_lanczos,&
-                                       error=error)
-            CASE(ls_scf_trs4)
-              CALL density_matrix_trs4(ls_scf_env%matrix_p(ispin), matrix_mixing_old(ispin),  ls_scf_env%matrix_s_sqrt_inv,&
-                                       nelectron_spin_real, ls_scf_env%eps_filter, ls_scf_env%homo_spin(ispin),&
-                                       ls_scf_env%lumo_spin(ispin), ls_scf_env%mu_spin(ispin), &
-                                       dynamic_threshold=ls_scf_env%dynamic_threshold,&
-                                       matrix_ks_deviation=matrix_ks_deviation(ispin), &
-                                       eps_lanczos=ls_scf_env%eps_lanczos, max_iter_lanczos=ls_scf_env%max_iter_lanczos,&
-                                       error=error)
-            END SELECT
-                                     
+            ! get the current Kohn-Sham matrix (ks) and return matrix_p evaluated using an external C routine 
+            CALL external_scf_method(transport_env, ls_scf_env%matrix_s, matrix_mixing_old(ispin), &
+                                     ls_scf_env%matrix_p(ispin), nelectron_spin_real, ls_scf_env%natoms, error)
+
             IF (ls_scf_env%has_s_preconditioner) THEN
                 CALL apply_matrix_preconditioner(ls_scf_env%matrix_p(ispin),"forward", &
                                ls_scf_env%matrix_bs_sqrt,ls_scf_env%matrix_bs_sqrt_inv,error)
             ENDIF
-            CALL cp_dbcsr_filter(ls_scf_env%matrix_p(ispin),ls_scf_env%eps_filter,error=error)
+
+            IF (ls_scf_env%nspins==1) CALL cp_dbcsr_scale(ls_scf_env%matrix_p(ispin),2.0_dp,error=error)
+         END DO
+      ELSE
+         ! run curvy steps if required. Needs an idempotent DM (either perification or restart)
+         IF((iscf>1.OR.ls_scf_env%scf_history%istore>0).AND.ls_scf_env%curvy_steps)THEN
+            CALL dm_ls_curvy_optimization(ls_scf_env,energy_old,check_convergence,error)
+         ELSE
+            ! turn the KS matrix in a density matrix
+            DO ispin=1,nspin
+               IF (iscf==1) THEN
+                  ! initialize the mixing matrix with the current state if needed
+                  CALL cp_dbcsr_copy(matrix_mixing_old(ispin), ls_scf_env%matrix_ks(ispin), error=error)
+               ELSE
+                IF (ls_scf_env%ls_diis) THEN ! ------- IF-DIIS+MIX--- START
+                 IF (diis_step.and.(iscf-1).ge.ls_scf_env%iter_ini_diis) THEN
+                  IF (unit_nr>0) THEN
+                   WRITE(unit_nr,'(A61)') &
+                          '*************************************************************'
+                   WRITE(unit_nr,'(A50,2(I3,A1),L1,A1)') &
+                          " Using DIIS mixed KS:  (iscf,INI_DIIS,DIIS_STEP)=(" , &
+                          iscf,",",ls_scf_env%iter_ini_diis,",",diis_step,")"
+                   WRITE(unit_nr,'(A52)') &
+                          " KS_nw= DIIS-Linear-Combination-Previous KS matrices"
+                   WRITE(unit_nr,'(61A)') &
+                          "*************************************************************"
+                  ENDIF
+                  CALL cp_dbcsr_copy(matrix_mixing_old(ispin),   & ! out
+                                     ls_scf_env%matrix_ks(ispin),& ! in
+                                     error=error)
+                 ELSE
+                  IF (unit_nr>0) THEN
+                   WRITE(unit_nr,'(A57)') &
+                         "*********************************************************"
+                   WRITE(unit_nr,'(A23,F5.3,A25,I3)') &
+                         " Using MIXING_FRACTION=",ls_scf_env%mixing_fraction, &
+                         " to mix KS matrix:  iscf=",iscf 
+                   WRITE(unit_nr,'(A7,F5.3,A6,F5.3,A7)') &
+                         " KS_nw=",ls_scf_env%mixing_fraction,"*KS + ", &
+                         1.0_dp-ls_scf_env%mixing_fraction,"*KS_old"
+                   WRITE(unit_nr,'(A57)') &
+                         "*********************************************************"
+                  ENDIF
+                  ! perform the mixing of ks matrices
+                  CALL cp_dbcsr_add(matrix_mixing_old(ispin)   ,       &
+                                    ls_scf_env%matrix_ks(ispin),       &
+                                    1.0_dp-ls_scf_env%mixing_fraction, &
+                                    ls_scf_env%mixing_fraction,        &
+                                    error=error)
+                 ENDIF
+                ELSE ! otherwise
+                  IF (unit_nr>0) THEN
+                   WRITE(unit_nr,'(A57)') &
+                         "*********************************************************"
+                   WRITE(unit_nr,'(A23,F5.3,A25,I3)') &
+                         " Using MIXING_FRACTION=", ls_scf_env%mixing_fraction, &
+                         " to mix KS matrix:  iscf=",iscf
+                   WRITE(unit_nr,'(A7,F5.3,A6,F5.3,A7)') &
+                         " KS_nw=",ls_scf_env%mixing_fraction,"*KS + ", &
+                         1.0_dp-ls_scf_env%mixing_fraction,"*KS_old"
+                   WRITE(unit_nr,'(A57)') &
+                         "*********************************************************"
+                  ENDIF
+                  ! perform the mixing of ks matrices
+                  CALL cp_dbcsr_add(matrix_mixing_old(ispin)   ,       &
+                                    ls_scf_env%matrix_ks(ispin),       &
+                                    1.0_dp-ls_scf_env%mixing_fraction, &
+                                    ls_scf_env%mixing_fraction,        &
+                                    error=error)
+                ENDIF ! ------- IF-DIIS+MIX--- END
+               ENDIF
    
-            IF (ls_scf_env%nspins==1) CALL cp_dbcsr_scale(ls_scf_env%matrix_p(ispin),2.0_dp,error=error)
-
-         ENDDO
+               ! compute the density matrix that matches it
+               ! we need the proper number of states
+               nelectron_spin_real=ls_scf_env%nelectron_spin(ispin)
+               IF (ls_scf_env%nspins==1) nelectron_spin_real=nelectron_spin_real/2
+   
+               SELECT CASE(ls_scf_env%purification_method)
+               CASE(ls_scf_ns)
+                 CALL density_matrix_sign(ls_scf_env%matrix_p(ispin),ls_scf_env%mu_spin(ispin), ls_scf_env%fixed_mu, &
+                                          matrix_mixing_old(ispin),ls_scf_env%matrix_s, ls_scf_env%matrix_s_inv, &
+                                          nelectron_spin_real,ls_scf_env%eps_filter,error)
+               CASE(ls_scf_tc2)
+                 CALL density_matrix_tc2(ls_scf_env%matrix_p(ispin), matrix_mixing_old(ispin),  ls_scf_env%matrix_s_sqrt_inv,&
+                                          nelectron_spin_real, ls_scf_env%eps_filter, ls_scf_env%homo_spin(ispin),&
+                                          ls_scf_env%lumo_spin(ispin), non_monotonic=ls_scf_env%non_monotonic, &
+                                          eps_lanczos=ls_scf_env%eps_lanczos, max_iter_lanczos=ls_scf_env%max_iter_lanczos,&
+                                          error=error)
+               CASE(ls_scf_trs4)
+                 CALL density_matrix_trs4(ls_scf_env%matrix_p(ispin), matrix_mixing_old(ispin),  ls_scf_env%matrix_s_sqrt_inv,&
+                                          nelectron_spin_real, ls_scf_env%eps_filter, ls_scf_env%homo_spin(ispin),&
+                                          ls_scf_env%lumo_spin(ispin), ls_scf_env%mu_spin(ispin), &
+                                          dynamic_threshold=ls_scf_env%dynamic_threshold,&
+                                          matrix_ks_deviation=matrix_ks_deviation(ispin), &
+                                          eps_lanczos=ls_scf_env%eps_lanczos, max_iter_lanczos=ls_scf_env%max_iter_lanczos,&
+                                          error=error)
+               END SELECT
+                                        
+               IF (ls_scf_env%has_s_preconditioner) THEN
+                   CALL apply_matrix_preconditioner(ls_scf_env%matrix_p(ispin),"forward", &
+                                  ls_scf_env%matrix_bs_sqrt,ls_scf_env%matrix_bs_sqrt_inv,error)
+               ENDIF
+               CALL cp_dbcsr_filter(ls_scf_env%matrix_p(ispin),ls_scf_env%eps_filter,error=error)
+      
+               IF (ls_scf_env%nspins==1) CALL cp_dbcsr_scale(ls_scf_env%matrix_p(ispin),2.0_dp,error=error)
+   
+            ENDDO
+         END IF
       END IF
 
       ! compute the corresponding new energy KS matrix and new energy
Index: input_cp2k_dft.F
===================================================================
--- input_cp2k_dft.F	(revision 14813)
+++ input_cp2k_dft.F	(working copy)
@@ -97,6 +97,7 @@
   USE input_cp2k_motion_print,         ONLY: add_format_keyword
   USE input_cp2k_poisson,              ONLY: create_poisson_section
   USE input_cp2k_rsgrid,               ONLY: create_rsgrid_section
+  USE input_cp2k_transport,            ONLY: create_transport_section
   USE input_cp2k_xc,                   ONLY: create_xc_section
   USE input_keyword_types,             ONLY: keyword_create,&
                                              keyword_release,&
@@ -551,6 +552,11 @@
     CALL create_ext_pot_section(subsection,error)
     CALL section_add_subsection(section, subsection, error=error)
     CALL section_release(subsection,error=error)
+
+    CALL create_transport_section(subsection,error)
+    CALL section_add_subsection(section, subsection, error=error)
+    CALL section_release(subsection,error=error)
+
     ! ZMP sections to include the external density or v_xc potential
     CALL create_ext_den_section(subsection,error)
     CALL section_add_subsection(section, subsection, error=error)
@@ -2666,6 +2672,13 @@
        CALL section_add_keyword(section,keyword,error=error)
        CALL keyword_release(keyword,error=error)
 
+       CALL keyword_create(keyword, name="TRANSPORT",&
+            description="Perform transport calculations (coupling CP2K and OMEN)",&
+            usage="TRANSPORT",lone_keyword_l_val=.TRUE.,&
+            default_l_val=.FALSE.,error=error)
+       CALL section_add_keyword(section,keyword,error=error)
+       CALL keyword_release(keyword,error=error)
+
        CALL keyword_create(keyword, name="KG_METHOD",&
             description="Use a Kim-Gordon-like scheme.",&
             usage="KG_METHOD",lone_keyword_l_val=.TRUE.,&
Index: input_constants.F
===================================================================
--- input_constants.F	(revision 14813)
+++ input_constants.F	(working copy)
@@ -829,11 +829,11 @@
   ! swarm parameters
   INTEGER, PARAMETER, PUBLIC               :: swarm_do_glbopt=1
 
-! global opt parameters
+  ! global opt parameters
   INTEGER, PARAMETER, PUBLIC               :: glbopt_do_minhop  =1,&
                                               glbopt_do_mincrawl=2
 
-! fm matrix multiplication
+  ! fm matrix multiplication
   INTEGER, PARAMETER, PUBLIC               :: do_pdgemm  =1,&
                                               do_dbcsr   =2
 
@@ -841,4 +841,9 @@
   INTEGER, PARAMETER, PUBLIC               :: dispersion_uff=100,&
                                               dispersion_d3 =200
 
+  ! transport section
+  INTEGER, PARAMETER, PUBLIC               :: misc_method=0,&
+                                              scalapack_diagonalization=1,&
+                                              exper_code=2,&
+                                              do_transport=3
 END MODULE input_constants
Index: dbcsrwrap/cp_dbcsr_interface.F
===================================================================
--- dbcsrwrap/cp_dbcsr_interface.F	(revision 14813)
+++ dbcsrwrap/cp_dbcsr_interface.F	(working copy)
@@ -2456,17 +2456,14 @@
     CHARACTER(LEN=*), PARAMETER :: routineN = 'cp_csr_create_from_dbcsr', &
       routineP = moduleN//':'//routineN
 
-    LOGICAL                                  :: fd
     TYPE(dbcsr_error_type)                   :: dbcsr_error
 
     IF (PRESENT(floor_dist)) THEN
-      fd = floor_dist
+      CALL csr_create_from_dbcsr(dbcsr_mat%matrix, csr_mat, equal_dist, floor_dist, dbcsr_error)
     ELSE
-      fd = .FALSE.
+      CALL csr_create_from_dbcsr(dbcsr_mat%matrix, csr_mat, equal_dist, error=dbcsr_error)
     ENDIF
 
-    CALL csr_create_from_dbcsr(dbcsr_mat%matrix, csr_mat, equal_dist, fd, dbcsr_error)
-
   END SUBROUTINE cp_csr_create_from_dbcsr
 
 ! *****************************************************************************
Index: qs_environment.F
===================================================================
--- qs_environment.F	(revision 14813)
+++ qs_environment.F	(working copy)
@@ -190,6 +190,7 @@
   USE termination,                     ONLY: stop_program
   USE timings,                         ONLY: timeset,&
                                              timestop
+  USE transport,                       ONLY: transport_env_create
 !  USE xas_control,                     ONLY: write_xas_control
 #include "./common/cp_common_uses.f90"
 
@@ -265,7 +266,8 @@
     TYPE(qs_subsys_type), POINTER            :: subsys
     TYPE(rel_control_type), POINTER          :: rel_control
     TYPE(section_vals_type), POINTER :: dft_section, et_coupling_section, &
-      harris_section, hfx_ri_section, hfx_section, kpoint_section, mp2_section
+      harris_section, hfx_ri_section, hfx_section, kpoint_section, &
+      mp2_section, transport_section
 
     failure = .FALSE.
     NULLIFY(my_cell, my_cell_ref, atomic_kind_set, particle_set, &
@@ -439,6 +441,12 @@
        CALL ls_scf_create(qs_env,error)
     ENDIF
 
+    transport_section => section_vals_get_subs_vals(qs_env%input,"DFT%TRANSPORT",error=error)
+    CALL section_vals_get(transport_section,explicit=qs_env%do_transport,error=error)
+    IF (qs_env%do_transport) THEN
+       CALL transport_env_create(qs_env,error)
+    END IF
+
     ! see if we have atomic relativistic corrections
     CALL get_qs_env(qs_env,rel_control=rel_control,error=error)
     IF (rel_control%rel_method /= rel_none) THEN
Index: qs_environment_types.F
===================================================================
--- qs_environment_types.F	(revision 14813)
+++ qs_environment_types.F	(working copy)
@@ -156,6 +156,8 @@
   USE semi_empirical_types,            ONLY: se_taper_release,&
                                              se_taper_type
   USE task_list_types,                 ONLY: task_list_type
+  USE transport_env_types,             ONLY: transport_env_release,&
+                                             transport_env_type
   USE virial_types,                    ONLY: virial_type
   USE wannier_states_types,            ONLY: wannier_centres_type
   USE xas_env_types,                   ONLY: xas_env_release,&
@@ -232,6 +234,7 @@
     LOGICAL :: run_rtp
     LOGICAL :: linres_run
     LOGICAL :: calc_image_preconditioner
+    LOGICAL :: do_transport
     REAL(KIND=dp)                                         :: sim_time
     REAL(KIND=dp) :: start_time, target_time
     REAL(KIND=dp),DIMENSION(:,:),POINTER                  :: image_matrix
@@ -240,6 +243,7 @@
     INTEGER                                               :: sim_step
     TYPE(ga_environment_type), POINTER                    :: ga_env
     TYPE(ls_scf_env_type), POINTER                        :: ls_scf_env
+    TYPE(transport_env_type), POINTER                     :: transport_env
     TYPE(cell_type), POINTER                              :: super_cell
     TYPE(mo_set_p_type), DIMENSION(:), POINTER            :: mos, mos_aux_fit
     TYPE(cp_fm_p_type), DIMENSION(:), POINTER             :: mo_derivs_aux_fit
@@ -459,6 +463,8 @@
 !> \param ga_env ...
 !> \param atprop ...
 !> \param ls_scf_env ...
+!> \param do_transport ...
+!> \param transport_env ...
 !> \param v_hartree_rspace ...
 !> \param s_mstruct_changed ...
 !> \param rho_changed ...
@@ -488,7 +494,7 @@
        outer_scf_history,outer_scf_ihistory,ep_qs_env,x_data,et_coupling,dftb_potential,results,&
        scp_env,se_taper,se_store_int_env,se_nddo_mpole,se_nonbond_env, admm_env, admm_dm, &
        lri_env,lri_density,hfx_ri_env,dispersion_env, vee,rho_external,external_vxc,mask,&
-       mp2_env,kg_env,WannierCentres,ga_env,atprop,ls_scf_env,v_hartree_rspace,&
+       mp2_env,kg_env,WannierCentres,ga_env,atprop,ls_scf_env,do_transport, transport_env,v_hartree_rspace,&
        s_mstruct_changed,rho_changed,potential_changed,forces_up_to_date,mscfg_env,&
        error)
     TYPE(qs_environment_type), POINTER       :: qs_env
@@ -648,6 +654,9 @@
       POINTER                                :: ga_env
     TYPE(atprop_type), OPTIONAL, POINTER     :: atprop
     TYPE(ls_scf_env_type), OPTIONAL, POINTER :: ls_scf_env
+    LOGICAL, OPTIONAL                        :: do_transport
+    TYPE(transport_env_type), OPTIONAL, &
+      POINTER                                :: transport_env
     TYPE(pw_type), OPTIONAL, POINTER         :: v_hartree_rspace
     LOGICAL, OPTIONAL                        :: s_mstruct_changed, &
                                                 rho_changed, &
@@ -716,6 +725,8 @@
     IF (PRESENT(run_rtp)) run_rtp=qs_env%run_rtp
     IF (PRESENT(rtp)) rtp=>qs_env%rtp
     IF (PRESENT(ls_scf_env)) ls_scf_env=>qs_env%ls_scf_env
+    IF (PRESENT(do_transport)) do_transport = qs_env%do_transport
+    IF (PRESENT(transport_env)) transport_env => qs_env%transport_env
     IF (PRESENT(mscfg_env)) mscfg_env=>qs_env%molecular_scf_guess_env
 
     IF (PRESENT(rho_atom_set)) &
@@ -857,6 +868,7 @@
     TYPE(cp_error_type), INTENT(inout)       :: error
 
     NULLIFY (qs_env%ls_scf_env)
+    NULLIFY (qs_env%transport_env)
     NULLIFY (qs_env%image_matrix)
     NULLIFY (qs_env%ipiv)
     NULLIFY (qs_env%image_coeff)
@@ -928,6 +940,7 @@
     qs_env%has_unit_metric=.FALSE.
     qs_env%use_harris=.FALSE.
     qs_env%calc_image_preconditioner=.TRUE.
+    qs_env%do_transport=.FALSE.
     qs_env%target_time = globenv%cp2k_target_time
     qs_env%start_time = globenv%cp2k_start_time
 
@@ -998,6 +1011,8 @@
 !> \param se_nonbond_env ...
 !> \param admm_env ...
 !> \param ls_scf_env ...
+!> \param do_transport ...
+!> \param transport_env ...
 !> \param lri_env ...
 !> \param lri_density ...
 !> \param hfx_ri_env ...
@@ -1023,8 +1038,8 @@
        linres_control,xas_env,cp_ddapc_env,cp_ddapc_ewald,&
        outer_scf_history,outer_scf_ihistory,ep_qs_env,x_data,et_coupling,dftb_potential,&
        scp_env,se_taper,se_store_int_env,se_nddo_mpole,se_nonbond_env,admm_env,ls_scf_env,&
-       lri_env,lri_density,hfx_ri_env,dispersion_env,mp2_env,kg_env,WannierCentres,ga_env,&
-       error)
+       do_transport, transport_env,lri_env,lri_density,hfx_ri_env,dispersion_env,mp2_env,kg_env,&
+       WannierCentres,ga_env,error)
 
     TYPE(qs_environment_type), POINTER       :: qs_env
     TYPE(cell_type), OPTIONAL, POINTER       :: super_cell
@@ -1104,6 +1119,9 @@
       POINTER                                :: se_nonbond_env
     TYPE(admm_type), OPTIONAL, POINTER       :: admm_env
     TYPE(ls_scf_env_type), OPTIONAL, POINTER :: ls_scf_env
+    LOGICAL, OPTIONAL                        :: do_transport
+    TYPE(transport_env_type), OPTIONAL, &
+      POINTER                                :: transport_env
     TYPE(lri_environment_type), OPTIONAL, &
       POINTER                                :: lri_env
     TYPE(lri_density_type), OPTIONAL, &
@@ -1147,6 +1165,8 @@
     IF (PRESENT(mos)) qs_env%mos => mos
     IF (PRESENT(mos_aux_fit)) qs_env%mos_aux_fit => mos_aux_fit
     IF (PRESENT(ls_scf_env)) qs_env%ls_scf_env => ls_scf_env
+    IF (PRESENT(do_transport)) qs_env%do_transport = do_transport
+    IF (PRESENT(transport_env)) qs_env%transport_env => transport_env
     ! if intels checking (-C) complains here, you have rediscovered a bug in the intel
     ! compiler (present in at least 10.0.025). A testcase has been submitted to intel.
     IF (PRESENT(use_harris)) qs_env%use_harris = use_harris
@@ -1457,6 +1477,10 @@
           CALL molecular_scf_guess_env_destroy(qs_env%molecular_scf_guess_env,&
                   error=error)
 
+          IF (ASSOCIATED(qs_env%transport_env)) THEN
+             CALL transport_env_release(qs_env%transport_env,error)
+          ENDIF
+
           !Only if do_xas_calculation
           IF(ASSOCIATED(qs_env%xas_env)) THEN
              CALL xas_env_release(qs_env%xas_env,error=error)
